(window.webpackJsonp=window.webpackJsonp||[]).push([[240],{851:function(t,e,o){"use strict";o.r(e);var r=o(9),a=Object(r.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("TitleSpan",[t._v(t._s(t.$frontmatter.folder))]),t._v(" "),o("h1",{attrs:{id:"frontmatter-title"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),o("VersionWarning"),t._v(" "),o("TocHeader"),t._v(" "),o("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,3]}}),t._v(" "),o("p",[t._v("We are assuming that you have "),o("RouterLink",{attrs:{to:"/airnode/pre-alpha/guides/provider/configuring-airnode.html"}},[t._v("configured your Airnode")]),t._v(" (and set "),o("code",[t._v("endpointId")]),t._v("s of your endpoints), and "),o("RouterLink",{attrs:{to:"/airnode/pre-alpha/guides/provider/deploying-airnode.html"}},[t._v("deployed your Airnode")]),t._v(" and received your "),o("code",[t._v("providerId")]),t._v(" in your receipt file.\nRequesters who know your "),o("code",[t._v("providerId")]),t._v(" and "),o("code",[t._v("endpointId")]),t._v("s should now be able to make requests to your endpoints.\nHowever, you probably do not want to serve the entire public with your Airnode, but rather")],1),t._v(" "),o("ul",[o("li",[t._v("Only serve your own client contracts")]),t._v(" "),o("li",[t._v("Only serve requesters who have made a subscription payment")]),t._v(" "),o("li",[t._v("Only serve requesters who have gone through KYC")]),t._v(" "),o("li",[t._v("...")])]),t._v(" "),o("p",[t._v("In this guide, we will explain how you can achieve this.")]),t._v(" "),o("h2",{attrs:{id:"authorizers"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#authorizers"}},[t._v("#")]),t._v(" "),o("code",[t._v("authorizers")])]),t._v(" "),o("p",[o("RouterLink",{attrs:{to:"/airnode/pre-alpha/protocols/request-response/general-structure.html#endpointstore-sol"}},[t._v("EndpointStore.sol")]),t._v(" keeps a list of "),o("RouterLink",{attrs:{to:"/airnode/pre-alpha/protocols/request-response/authorizer.html"}},[t._v("authorizer")]),t._v(" addresses for each "),o("code",[t._v("providerId")]),t._v("â€“"),o("code",[t._v("endpointId")]),t._v(" pair.\nAn authorizer is a contract that Airnode calls to check if it should respond to a specific request.\nIt can enforce any kind of authorization policy that one could implement as a contract.")],1),t._v(" "),o("h2",{attrs:{id:"default-state-deny-all"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#default-state-deny-all"}},[t._v("#")]),t._v(" Default state: Deny all")]),t._v(" "),o("p",[t._v("By default, the authorizers of all endpoints of a provider is an empty list.\nAn empty authorizers list means that endpoint is not allowed to be used by anyone.\nTherefore, after deploying your Airnode, you must also set authorizers for your endpoints for them to be accessible.")]),t._v(" "),o("h2",{attrs:{id:"allow-all"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#allow-all"}},[t._v("#")]),t._v(" Allow all")]),t._v(" "),o("p",[t._v("The simplest authorization policy is opening the endpoint to the public, so let us see how to do that first.\nAuthorizers being set to "),o("code",[t._v("[0]")]),t._v(" means that all requests made to it will be authorized (i.e., will be responded to by Airnode).\nOnly the "),o("code",[t._v("providerAdmin")]),t._v(" of a provider can update the authorizers of its endpoints.\nTherefore, you will need to make a transaction using the provider admin address (that you have set in "),o("code",[t._v("config.json")]),t._v(" as "),o("code",[t._v("providerAdminForRecordCreation")]),t._v(") to "),o("RouterLink",{attrs:{to:"/airnode/pre-alpha/protocols/request-response/general-structure.html#endpointstore-sol"}},[t._v("EndpointStore.sol")]),t._v(".\nIn JS (using ethers.js):")],1),t._v(" "),o("div",{staticClass:"language-js line-numbers-mode"},[o("pre",{pre:!0,attrs:{class:"language-js"}},[o("code",[t._v("airnode"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("connect")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("providerAdmin"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateEndpointAuthorizers")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("providerId"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" endpointId"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ethers"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constants"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AddressZero"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),o("div",{staticClass:"line-numbers-wrapper"},[o("span",{staticClass:"line-number"},[t._v("1")]),o("br")])]),o("p",[t._v("You can also use "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/tree/pre-alpha/packages/admin#update-authorizers",target:"_blank",rel:"noopener noreferrer"}},[t._v("@api3/airnode-admin"),o("OutboundLink")],1),t._v(" to update endpoint authorizers.")]),t._v(" "),o("p",[t._v("After making this transaction, your Airnode will respond to all requests.\nNote that being able to do this on-chain through "),o("code",[t._v("providerAdmin")]),t._v(" allows you to update your authorization policies without interacting with your Airnode or having to redeploy it.")]),t._v(" "),o("h2",{attrs:{id:"custom-authorization-policies"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#custom-authorization-policies"}},[t._v("#")]),t._v(" Custom authorization policies")]),t._v(" "),o("p",[t._v("We have mentioned that authorizer contracts can implement any arbitrary authorization logic.\nSee "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/pre-alpha/packages/protocol/contracts/authorizers/MinBalanceAuthorizer.sol",target:"_blank",rel:"noopener noreferrer"}},[t._v("this example"),o("OutboundLink")],1),t._v(" where Airnode only responds to requests if the wallet it will use to fulfill the request has a balance more than an amount set by the provider admin.")]),t._v(" "),o("p",[t._v("The authorizer list allows you to combine single-purpose authorizer contracts to form complex policies as described in the "),o("RouterLink",{attrs:{to:"/airnode/pre-alpha/protocols/request-response/authorizer.html#authorizer-list"}},[t._v("docs")]),t._v(".\nIf you would like to contribute to this set of authorizer contracts, please join the conversation in "),o("a",{attrs:{href:"https://github.com/api3dao/airnode/issues/38",target:"_blank",rel:"noopener noreferrer"}},[t._v("this issue"),o("OutboundLink")],1),t._v(".")],1),t._v(" "),o("h2",{attrs:{id:"conclusion"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#conclusion"}},[t._v("#")]),t._v(" Conclusion")]),t._v(" "),o("p",[t._v("Your Airnode is completely set up now.\nThe following guides will be on how a requester would be able to make requests to it.")])],1)}),[],!1,null,null,null);e.default=a.exports}}]);