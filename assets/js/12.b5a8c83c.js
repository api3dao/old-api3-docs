(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{1576:function(e,t,s){"use strict";s.r(t);var n=s(9),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("TitleSpan",[e._v(e._s(e.$frontmatter.folder))]),e._v(" "),n("h1",{attrs:{id:"frontmatter-title"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),n("TocHeader"),e._v(" "),n("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,3]}}),e._v(" "),n("p",[e._v("This project is a simple and quick introduction to API3's QRNG service. Simply\nfollow the steps to see how a smart contract (known as a requester) can access\nan on-chain quantum random number. You will use the browser based Remix IDE and\nMetaMask. Some basic knowledge of these two tools is assumed.")]),e._v(" "),n("p",[e._v("Remix UI components to interact with are shown as:\n"),n("ElementSelect",{attrs:{text:"UI name"}}),e._v(" (brown) highlighted text.")],1),e._v(" "),n("h2",{attrs:{id:"step-1-add-the-sample-contract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-1-add-the-sample-contract"}},[e._v("#")]),e._v(" Step 1: Add the Sample Contract")]),e._v(" "),n("p",[e._v("Open the "),n("a",{attrs:{href:"https://remix.ethereum.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("Remix online IDE"),n("OutboundLink")],1),e._v(" using a browser that you\nhave added Metamask support to. Not all browsers support\n"),n("a",{attrs:{href:"https://metamask.io/download/",target:"_blank",rel:"noopener noreferrer"}},[e._v("MetaMask"),n("OutboundLink")],1),e._v(".")]),e._v(" "),n("p",[e._v("Add a new file called "),n("code",[e._v("RemixQrngExample.sol")]),e._v(" to a Remix workspace. You can use\nan existing workspace or create a new one. Copy and paste the code from the\n"),n("RouterLink",{attrs:{to:"/qrng/reference/remix-example.html"}},[e._v("RemixQrngExample.sol")]),e._v(" contract into the file.")],1),e._v(" "),n("p",[n("img",{attrs:{src:s(743),alt:"Add Contract"}})]),e._v(" "),n("h2",{attrs:{id:"step-2-compile-the-contract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-2-compile-the-contract"}},[e._v("#")]),e._v(" Step 2: Compile the Contract")]),e._v(" "),n("p",[e._v("Switch to the "),n("ElementSelect",{attrs:{text:"SOLIDITY COMPILER"}}),e._v(" tab. Select the "),n("code",[e._v("0.8.9")]),e._v("\nversion of Solidity from the "),n("ElementSelect",{attrs:{text:"COMPILER"}}),e._v(" pick list. Select\nthe "),n("ElementSelect",{attrs:{text:"Compile\nRemixQrngExample.sol"}}),e._v(" button to compile the "),n("code",[e._v("RemixQrngExample.sol")]),e._v(" contract.")],1),e._v(" "),n("img",{attrs:{src:s(744),width:"50%"}}),e._v(" "),n("h2",{attrs:{id:"step-3-deploy-the-contract"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-3-deploy-the-contract"}},[e._v("#")]),e._v(" Step 3: Deploy the Contract")]),e._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[e._v("Deploy to a testnet only.")]),e._v(" "),n("p",[e._v("Do not deploy the "),n("code",[e._v("RemixQrngExample.sol")]),e._v(" contract to a production network. It\nlacks adequate security features.")]),e._v(" "),n("p",[e._v("You can deploy on a "),n("RouterLink",{attrs:{to:"/qrng/reference/chains.html"}},[e._v("testnet")]),e._v(" to get random numbers from\nthe "),n("RouterLink",{attrs:{to:"/qrng/reference/providers.html#nodary-random-numbers"}},[e._v("Nodary RNG API")]),e._v(", which has\nequivalent usage as\n"),n("RouterLink",{attrs:{to:"/qrng/reference/providers.html#anu-quantum-random-numbers"}},[e._v("ANU Quantum Random Numbers")]),e._v("\navailable on mainnets.")],1)]),e._v(" "),n("p",[e._v("Switch to the "),n("ElementSelect",{attrs:{text:"DEPLOY & RUN TRANSACTIONS"}}),e._v(" tab. Use\nMetaMask and switch to the desired account and testnet for your deployment.\nSelect the "),n("ElementSelect",{attrs:{text:"ENVIRONMENT"}}),e._v(" pick list and switch to "),n("em",[e._v("Injected\nProvider - Metamask")]),e._v(". Check that the testnet and account you selected in\nMetaMask are displayed in Remix as shown below.")],1),e._v(" "),n("img",{attrs:{src:s(745),width:"50%"}}),e._v(" "),n("p",[e._v("Be sure "),n("code",[e._v("RemixQrngExample - contracts/RemixQrngExample.sol")]),e._v(" is selected in the\n"),n("ElementSelect",{attrs:{text:"CONTRACT"}}),e._v(" pick list. Add the Airnode "),n("code",[e._v("_airnodeRrp")]),e._v("\naddress parameter value for the constructor into the field next to the\n"),n("ElementSelect",{attrs:{text:"Deploy"}}),e._v(" button. See the\n"),n("RouterLink",{attrs:{to:"/qrng/reference/chains.html"}},[e._v("list of addresses")]),e._v(" for the testnet you are using.\nSelect the "),n("ElementSelect",{attrs:{text:"Deploy"}}),e._v(" button and approve the transaction\nwith MetaMask.")],1),e._v(" "),n("img",{attrs:{src:s(746),width:"50%"}}),e._v(" "),n("h2",{attrs:{id:"step-4-setting-the-parameters"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-4-setting-the-parameters"}},[e._v("#")]),e._v(" Step 4: Setting the Parameters")]),e._v(" "),n("p",[e._v("Before making a request, parameters must be set. They determine which Airnode\nendpoint will be called and define the wallet used to pay the gas costs for the\nresponse.")]),e._v(" "),n("p",[e._v("Under "),n("ElementSelect",{attrs:{text:"Deployed\nContracts"}}),e._v(" expand and expose the functions and variables of the contract. Note\nthe address of the contract that is displayed with its name. This is the\nrequester's contract address which will be needed later. Next expand the\n"),n("ElementSelect",{attrs:{text:"setRequestParameters"}}),e._v(" function. Add the following to the\ncorresponding fields for the function.")],1),e._v(" "),n("ul",[n("li",[n("p",[n("code",[e._v("_airnode")]),e._v(": The airnode address (copy it here →\n"),n("CopyIcon",{attrs:{text:"0x6238772544f029ecaBfDED4300f13A3c4FE84E1D"}}),e._v(" ) of the desired\nRNG service provider. See its value from the\n"),n("RouterLink",{attrs:{to:"/qrng/reference/providers.html#airnode-2"}},[e._v("Nodary Airnode")]),e._v(".")],1)]),e._v(" "),n("li",[n("p",[n("code",[e._v("_endpointIdUint256")]),e._v(": The Airnode endpoint ID (copy it here →\n"),n("CopyIcon",{attrs:{text:"0xfb6d017bb87991b7495f563db3c8cf59ff87b09781947bb1e417006ad7f55a78"}}),e._v("\n) that will return a single random number. See its value from the\n"),n("RouterLink",{attrs:{to:"/qrng/reference/providers.html#endpointiduint256-2"}},[e._v("Nodary Airnode")]),e._v(".")],1)]),e._v(" "),n("li",[n("p",[n("code",[e._v("_sponsorWallet")]),e._v(": A wallet derived from the requester's contract address, the\nAirnode address, and the Airnode xpub. The wallet is used to pay gas costs to\nacquire a random number. A sponsor wallet must be derived using the command\n"),n("RouterLink",{attrs:{to:"/airnode/v0.9/reference/packages/admin-cli.html#derive-sponsor-wallet-address"}},[e._v("derive-sponsor-wallet-address")]),e._v("\nfrom the Admin CLI. Use the value of the "),n("em",[e._v("sponsor wallet address")]),e._v(" that the\ncommand outputs.")],1),e._v(" "),n("div",{staticClass:"language-sh line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-sh"}},[n("code",[e._v("npx @api3/airnode-admin derive-sponsor-wallet-address "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --airnode-xpub xpub6CuDdF9zdWTRuGybJPuZUGnU4suZowMmgu15bjFZT2o6PUtk4Lo78KGJUGBobz3pPKRaN9sLxzj21CMe6StP3zUsd8tWEJPgZBesYBMY7Wo "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --airnode-address 0x6238772544f029ecaBfDED4300f13A3c4FE84E1D "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n  --sponsor-address "),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("use-the-address-of: RemixQrngExample.sol"),n("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# --airnode-xpub:    Pre-filled, see https://old-docs.api3.org/qrng/reference/providers.html.")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# --airnode-address: Pre-filled, see https://old-docs.api3.org/qrng/reference/providers.html.")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# --sponsor-address: Use the requester's contract address for")]),e._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#                    RemixQrngExample.sol as displayed in the Remix IDE.")]),e._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# The command outputs.")]),e._v("\n  Sponsor wallet address: 0x6394"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".5906757\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Use the above address from your command execution as the value for _sponsorWallet.")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br")])]),n("p",[e._v("Be sure to fund the public address of the sponsor wallet that the command\noutputs with enough testnet currency. The funds are used to pay gas costs for\nthe Airnode's response. You can use below table for amount of fund as\nreference.")]),e._v(" "),n("table",[n("thead",[n("tr",[n("th",[e._v("Testnet")]),e._v(" "),n("th",[e._v("Amount")]),e._v(" "),n("th",[e._v("Unit")]),e._v(" "),n("th",[e._v("Chain Id")])])]),e._v(" "),n("tbody",[n("tr",[n("td",[e._v("Goerli")]),e._v(" "),n("td",[e._v("0.1")]),e._v(" "),n("td",[e._v("ETH")]),e._v(" "),n("td",[e._v("5")])]),e._v(" "),n("tr",[n("td",[e._v("Sepolia")]),e._v(" "),n("td",[e._v("0.05")]),e._v(" "),n("td",[e._v("SEP")]),e._v(" "),n("td",[e._v("11155111")])]),e._v(" "),n("tr",[n("td",[e._v("RSK testnet")]),e._v(" "),n("td",[e._v("0.001")]),e._v(" "),n("td",[e._v("tRBTC")]),e._v(" "),n("td",[e._v("31")])]),e._v(" "),n("tr",[n("td",[e._v("POA Network Sokol testnet")]),e._v(" "),n("td",[e._v("0.05")]),e._v(" "),n("td",[e._v("POA")]),e._v(" "),n("td",[e._v("77")])]),e._v(" "),n("tr",[n("td",[e._v("BNB Chain testnet")]),e._v(" "),n("td",[e._v("0.005")]),e._v(" "),n("td",[e._v("tBNB")]),e._v(" "),n("td",[e._v("97")])]),e._v(" "),n("tr",[n("td",[e._v("Optimism testnet")]),e._v(" "),n("td",[e._v("0.05")]),e._v(" "),n("td",[e._v("ETH")]),e._v(" "),n("td",[e._v("420")])]),e._v(" "),n("tr",[n("td",[e._v("Moonbase Alpha testnet")]),e._v(" "),n("td",[e._v("0.1")]),e._v(" "),n("td",[e._v("DEV")]),e._v(" "),n("td",[e._v("1287")])]),e._v(" "),n("tr",[n("td",[e._v("Fantom testnet")]),e._v(" "),n("td",[e._v("0.5")]),e._v(" "),n("td",[e._v("FTM")]),e._v(" "),n("td",[e._v("4002")])]),e._v(" "),n("tr",[n("td",[e._v("Avalanche Fuji testnet")]),e._v(" "),n("td",[e._v("0.3")]),e._v(" "),n("td",[e._v("AVAX")]),e._v(" "),n("td",[e._v("43113")])]),e._v(" "),n("tr",[n("td",[e._v("Polygon Mumbai testnet")]),e._v(" "),n("td",[e._v("0.05")]),e._v(" "),n("td",[e._v("MATIC")]),e._v(" "),n("td",[e._v("80001")])]),e._v(" "),n("tr",[n("td",[e._v("Milkomeda C1 testnet")]),e._v(" "),n("td",[e._v("0.5")]),e._v(" "),n("td",[e._v("mTAda")]),e._v(" "),n("td",[e._v("200101")])]),e._v(" "),n("tr",[n("td",[e._v("Arbitrum testnet")]),e._v(" "),n("td",[e._v("0.01")]),e._v(" "),n("td",[e._v("AGOR")]),e._v(" "),n("td",[e._v("421613")])])])])])]),e._v(" "),n("p",[e._v("Lastly select the "),n("ElementSelect",{attrs:{text:"Transact"}}),e._v(" button in Remix to send the\nparameters to the contract to be stored. Approve the transaction with MetaMask.")],1),e._v(" "),n("airnode-SponsorWalletWarning"),e._v(" "),n("h2",{attrs:{id:"step-5-make-a-request"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-5-make-a-request"}},[e._v("#")]),e._v(" Step 5: Make a Request")]),e._v(" "),n("p",[e._v("Be sure you have funded the sponsor wallet created in step #4. Its funds will be\nused to pay gas costs when Airnode returns a random number to the callback\nfunction "),n("code",[e._v("fulfillUint256()")]),e._v(".")]),e._v(" "),n("p",[e._v("Each request made will use the parameters set in step 4. You can change the\nparameters at any time and subsequent requests will use the newer parameter set.")]),e._v(" "),n("p",[e._v("To make a request select the "),n("ElementSelect",{attrs:{text:"MakeRequest"}}),e._v(" button in\nRemix. Approve the transaction with MetaMask.")],1),e._v(" "),n("p",[e._v("As soon as the transaction completes in MetaMask, select the\n"),n("ElementSelect",{attrs:{text:"lastRequest"}}),e._v(" button in Remix. You will see the\n"),n("code",[e._v("requestId")]),e._v(" and a "),n("code",[e._v("randomNumber")]),e._v(" which equals "),n("em",[e._v("0")]),e._v(". This is because the random\nnumber has yet to be returned to the callback function. Copy and paste the\n"),n("code",[e._v("requestId")]),e._v(" into the field for "),n("ElementSelect",{attrs:{text:"waitingFulfillment"}}),e._v(" and\nselect the button. You will see the value is "),n("em",[e._v("true")]),e._v(", meaning the callback has\nnot been made.")],1),e._v(" "),n("img",{attrs:{src:s(747),width:"50%"}}),e._v(" "),n("h2",{attrs:{id:"step-6-view-the-response"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#step-6-view-the-response"}},[e._v("#")]),e._v(" Step 6: View the Response")]),e._v(" "),n("p",[e._v("The request is gathered by the off-chain Airnode which in turn calls the API\nprovider. Once the API provider returns data, Airnode will callback to the\n"),n("code",[e._v("RemixQrngExample.sol")]),e._v(" contract function\n"),n("code",[e._v("fulfillUint256(bytes32 requestId, bytes calldata data)")]),e._v(".")]),e._v(" "),n("p",[e._v("Select the the "),n("ElementSelect",{attrs:{text:"lastRequest"}}),e._v(" button in Remix again. If the\ncallback has been successfully completed the randomNumber will be present. The\nvalue of "),n("ElementSelect",{attrs:{text:"waitingFulfillment"}}),e._v(" will be "),n("em",[e._v("false")]),e._v(".")],1),e._v(" "),n("img",{attrs:{src:s(748),width:"50%"}})],1)}),[],!1,null,null,null);t.default=a.exports},743:function(e,t,s){e.exports=s.p+"assets/img/qrng-add-contract.7dd4b099.png"},744:function(e,t,s){e.exports=s.p+"assets/img/qrng-compile.2bb21182.png"},745:function(e,t,s){e.exports=s.p+"assets/img/qrng-deploy-net-account.f656b079.png"},746:function(e,t,s){e.exports=s.p+"assets/img/qrng-deploy-contract-airnode-address.bae6edd6.png"},747:function(e,t,s){e.exports=s.p+"assets/img/qrng-response-wait.111f0f64.png"},748:function(e,t,s){e.exports=s.p+"assets/img/qrng-response-complete.5cc28702.png"}}]);