(window.webpackJsonp=window.webpackJsonp||[]).push([[737],{1512:function(t,a,s){"use strict";s.r(a);var e=s(9),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("TitleSpan",[t._v(t._s(t.$frontmatter.folder))]),t._v(" "),s("h1",{attrs:{id:"frontmatter-title"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),s("TocHeader"),t._v(" "),s("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,3]}}),t._v(" "),s("p",[t._v("For on-chain smart contracts, the function\n"),s("a",{attrs:{href:"https://github.com/api3dao/airnode-protocol-v1/blob/v0.5.0/contracts/dapis/DapiServer.sol#L791-L806",target:"_blank",rel:"noopener noreferrer"}},[t._v("dataFeedIdToReaderToWhitelistStatus()"),s("OutboundLink")],1),t._v("\nreturns "),s("RouterLink",{attrs:{to:"/dapis/developers/#coverage-policies"}},[t._v("read access")]),t._v(" information with the\n"),s("code",[t._v("expirationTimestamp")]),t._v(" and "),s("code",[t._v("indefiniteWhitelistCount")]),t._v(" of a reader for the\nspecified dAPI data feed.")],1),t._v(" "),s("p",[t._v("The reader will not be able to read the dAPI data feed past the\nexpirationTimestamp (assuming their "),s("code",[t._v("indefiniteWhitelistCount")]),t._v(" is 0 ). If the\n"),s("code",[t._v("indefiniteWhitelistCount")]),t._v(" is greater than 0 , the reader will be able to read\nthe data feed indefinitely (regardless of the value of "),s("code",[t._v("expirationTimestamp")]),t._v(").")]),t._v(" "),s("h2",{attrs:{id:"example-usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example-usage"}},[t._v("#")]),t._v(" Example Usage")]),t._v(" "),s("div",{staticClass:"language-solidity line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-solidity"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SPDX-License-Identifier: MIT")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pragma")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("solidity")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.8")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v(".9")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@api3/airnode-protocol-v1/contracts/dapis/interfaces/IDapiServer.sol"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("contract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("mySmartContract")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myReadable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" _dapiServerContractAddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" _datafeedId\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("external")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint64")]),t._v(" expirationTimestamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint192")]),t._v(" indefiniteWhitelistCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Calling the DapiServer for reader status")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// where "this" is the contract address of this contract (myReadable).')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expirationTimestamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" indefiniteWhitelistCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("IDapiServer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_dapiServerContractAddress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("dataFeedIdToReaderToWhitelistStatus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_datafeedId"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br")])]),s("h2",{attrs:{id:"parameters"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parameters"}},[t._v("#")]),t._v(" Parameters")]),t._v(" "),s("p",[s("code",[t._v("dataFeedIdToReaderToWhitelistStatus(bytes32 datafeedId, address reader)")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("bytes32 datafeedId")]),t._v(" - The ID of a dAPI, Beacon, or Beacon set.")]),t._v(" "),s("li",[s("code",[t._v("address reader")]),t._v(" - The address to verify such as the reader's smart contract\naddress or another address.")])]),t._v(" "),s("h3",{attrs:{id:"using-a-dapiname-for-the-datafeedid-parameter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-a-dapiname-for-the-datafeedid-parameter"}},[t._v("#")]),t._v(" Using a "),s("code",[t._v("dapiName")]),t._v(" for the "),s("code",[t._v("datafeedId")]),t._v(" parameter")]),t._v(" "),s("p",[t._v("If you want to check the status using a "),s("code",[t._v("dapiName")]),t._v(", first encode the "),s("code",[t._v("dapiName")]),t._v("\nto bytes32 and calculate the off-chain hash of the "),s("code",[t._v("encodedDapiName")]),t._v(" as shown\nbelow. Then pass the value of "),s("code",[t._v("dapiNameHash")]),t._v(" as "),s("code",[t._v("_datafeedId")]),t._v(" in the code\nexample above. Try it in the\n"),s("a",{attrs:{href:"https://playground.ethers.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ethers playground"),s("OutboundLink")],1),t._v(".")]),t._v(" "),s("div",{staticClass:"language-solidity line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-solidity"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// First encode the dapiName (such as AVAX/USD) to bytes32")]),t._v("\nencodedDapiName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ethers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("formatBytes32String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AVAX/USD"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// encodedDapiName now equals")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0x415641582f555344000000000000000000000000000000000000000000000000")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Then calculate the off-chain hash")]),t._v("\ndapiNameHash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ethers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("utils"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("solidityKeccak256")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bytes32'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("encodedDapiName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dapiNameHash now equals")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0xcc06defee290c6e46f55823e39eb14024b06d4a6c7a0b6bf8b1f1e229c389b9c")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("h2",{attrs:{id:"returns"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#returns"}},[t._v("#")]),t._v(" Returns")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("expirationTimestamp")]),t._v(" - Timestamp at which the whitelisting of the reader will\nexpire.")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("indefiniteWhitelistCount")]),t._v(" - Number of times "),s("code",[t._v("reader")]),t._v(" was whitelisted\nindefinitely for "),s("code",[t._v("dataFeedId")]),t._v(".")])])])],1)}),[],!1,null,null,null);a.default=n.exports}}]);