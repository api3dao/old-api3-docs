(window.webpackJsonp=window.webpackJsonp||[]).push([[91],{551:function(e,t,a){e.exports=a.p+"assets/img/summary-airnode-2-parts.f1663f5b.png"},946:function(e,t,a){"use strict";a.r(t);var n=a(9),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("TitleSpan",[e._v(e._s(e.$frontmatter.folder))]),e._v(" "),n("h1",{attrs:{id:"frontmatter-title"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),n("VersionWarning"),e._v(" "),n("TocHeader"),e._v(" "),n("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,3]}}),e._v(" "),n("p",[e._v('Airnode is a serverless oracle node implemented with a "set and forget"\nphilosophy. Airnode is composed of two parts: the off-chain '),n("strong",[e._v("Airnode")]),e._v(' (a.k.a.\n"the node") deployed as self hosted or cloud provider functions (e.g., AWS) and\nthe on-chain '),n("strong",[e._v("protocol contract")]),e._v(" AirnodeRrp.sol.")]),e._v(" "),n("blockquote",[n("p",[n("img",{attrs:{src:a(551),alt:"2-parts"}}),e._v(" "),n("br"),n("br")]),e._v(" "),n("p",{staticClass:"diagram-line",staticStyle:{color:"black"}},[e._v('Airnode is composed of two parts: the off-chain Airnode (a.k.a. "the node") deployed usually as cloud provider functions (e.g., AWS) and the on-chain protocol contract  AirnodeRrp.sol.')])]),e._v(" "),n("p",[e._v("At its core, "),n("strong",[e._v("Airnode")]),e._v(" brings the ability for API providers to easily run\ntheir own "),n("em",[e._v("oracle nodes")]),e._v(". This allows them to provide their data on-chain,\nwithout an intermediary, to any "),n("em",[e._v("decentralized app")]),e._v(" (dApp) interested in their\nservices.")]),e._v(" "),n("p",[e._v("At the heart of this mechanism sits "),n("strong",[e._v("Airnode")]),e._v(", an open-source oracle node.\nIt's designed to be easily deployed by any API provider with almost no\nmaintenance. Because of Airnode, dApp developers can write "),n("em",[e._v("smart contracts")]),e._v(" to\ninteract with the on-chain data of API providers.")]),e._v(" "),n("p",[e._v("Airnode is designed with mechanisms to remove the on-chain or off-chain concerns\nof API providers. The set-and-forget framework of Airnode is all about ease of\nimplementation.")]),e._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),n("p",[e._v("Learn more about Airnode experience. Read Section 4 of the\n"),n("a",{attrs:{href:"/api3-whitepaper-v1.0.2.pdf#Airnode:%20A%20Node%20Designed%20for%20First-Party%20Oracles",target:"_api3-whitepaper"}},[e._v("API3\nWhitepaper")]),e._v(", "),n("em",[e._v("Airnode: A Node Designed for First-Party Oracles")])])]),e._v(" "),n("h2",{attrs:{id:"designed-for-first-party-oracles"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#designed-for-first-party-oracles"}},[e._v("#")]),e._v(" Designed for First-Party Oracles")]),e._v(" "),n("p",[e._v("First-party oracles are integral to the API3 solution. This means each API is\nserved by an oracle that is operated by the entity that owns the API, rather\nthan a third party. This doc discusses the benefits of using first-party\noracles, why it is not feasible for API providers to operate their own oracles\nwith current available solutions and how to solve this problem with Airnode.")]),e._v(" "),n("h2",{attrs:{id:"benefits-of-disintermediation"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#benefits-of-disintermediation"}},[e._v("#")]),e._v(" Benefits of Disintermediation")]),e._v(" "),n("p",[e._v("There is a simple solution to intermediaries: First-party oracles; that is,\noracles operated by the API providers themselves. API providers operating their\nown oracles means they would be signing their responses with their private keys\nat the smart contract platform protocol-level, which is the best proof that the\ndata is not tampered with. Moreover, first-party oracles are private by default,\nas a third party cannot observe the raw data from the API being processed, which\nallows them to be used in a wider variety of use cases natively.")]),e._v(" "),n("p",[e._v("A data feed composed of first-party oracles would be more cost-efficient\ncompared to one employing middlemen, as one needs to pay middlemen both for\ntheir services and to incentivize them against attacking the data feed (referred\nto as the middleman tax). In addition, a data feed composed of first-party\noracles will need fewer oracles, as it would not need over-redundant\ndecentralization at the oracle level to protect against attacks from\nthird-parties. Assuming that each API is typically served by at least two\nthird-party oracles, data feeds powered by first-party oracles would be at least\n50% more efficient in terms of gas costs, by a conservative estimate.")]),e._v(" "),n("p",[e._v("First-party oracles also provide much needed transparency in terms of the data\nsource and the degree of decentralization. Since each API provider will operate\nan oracle—which will be visible on-chain—the number of oracles serving a data\nfeed will accurately represent how decentralized it is, as there is a one-to-one\nmapping between oracle and data source. Furthermore, the API providers would\npublish their on-chain identities through off-chain channels, which would allow\nthe users to verify whose data they are consuming at a given time.")]),e._v(" "),n("p",[e._v("Finally, having the API providers operate the oracles helps solves the legal\nissues as the API services no longer need to be licensed to a third party and\nthe API providers receive the entire revenue. Furthermore, this solves the\nrent-seeking third-party oracles problem, and allows the funds to be redirected\nto the group that is doing the heavy lifting, the API providers. Incentivizing\nAPI providers aligns their financial interests with the ones of the API3\necosystem, resulting in a strong mutual bond between the two.")]),e._v(" "),n("h2",{attrs:{id:"off-chain-signing-of-data"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#off-chain-signing-of-data"}},[e._v("#")]),e._v(" Off-Chain Signing of Data")]),e._v(" "),n("p",[e._v("There is a hybrid solution that still depends on third-party oracles, yet does\nnot let them tamper with the data. In this scheme, the API provider signs their\ndata with their private key off-chain and serves it over a regular API endpoint.\nThird party oracles call this endpoint to get the signed data and post it to the\nchain. The authenticity of the data — that it is not tampered with by the third\nparty oracles — can then be verified on-chain using the public key of the API\nprovider.")]),e._v(" "),n("p",[e._v("Although it eliminates the risk of data tampering at the oracle level, this\nsolution is essentially a half-measure. By depending on third-party oracles, it\ncontinues suffering from the ecosystem issues caused by depending on third-party\noracles, and, in addition, requires modifications at the API-side to implement\noff-chain signing. This results in a severely limited API selection even\ncompared to the regular third party oracle based solutions, and restricts the\necosystem growth potential of the solution to the application-scale.")]),e._v(" "),n("h2",{attrs:{id:"barriers-to-api-providers-operating-oracles"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#barriers-to-api-providers-operating-oracles"}},[e._v("#")]),e._v(" Barriers to API Providers Operating Oracles")]),e._v(" "),n("p",[e._v("During work from the past, API3 communicated with API providers extensively and\nobserved the following barriers to oracle onboarding and operation:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("Traditional API providers are typically not more familiar with blockchain\ntechnologies than the general public. This applies even for the ones that\ncurate cryptocurrency market data—as their main operation is collecting data\nfrom exchange APIs, processing them, and serving the result through their own\nAPIs—which does not require any blockchain-specific know-how. Therefore, they\ntypically cannot readily operate an oracle node with in-house resources.")])]),e._v(" "),n("li",[n("p",[e._v("There is no job market for oracle node operators. Even if some API providers\nwere to obtain the specific know-how needed by hiring the few node operators\nthat are available, this would not be a scalable solution.")])]),e._v(" "),n("li",[n("p",[e._v("Operating an oracle node consumes a lot of resources in the form of manhours\nand infrastructure costs. Unless one is guaranteed significant subsidies or\nfuture profits, operating an oracle node is financially infeasible.")])]),e._v(" "),n("li",[n("p",[e._v("Operating an oracle node requires the API provider to transact with\ncryptocurrencies. Specifically, they must pay for gas costs in the native\ncurrency (e.g., ETH) and receive payments in one or more cryptocurrencies.\nThis disqualifies the vast majority of API providers due to compliance, legal\nand accounting reasons. In addition, any scheme that requires API providers\nto stake funds is categorically rejected for similar financial risk-related\nreasons.")])])]),e._v(" "),n("h2",{attrs:{id:"airnode-features"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#airnode-features"}},[e._v("#")]),e._v(" Airnode Features")]),e._v(" "),n("p",[e._v("Airnode is a fully-serverless oracle node that is designed specifically for API\nproviders to operate their own oracles. It addresses many of the oracle\nnode-related issues API provider face:")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("It does not require any specific know-how to operate. In fact, it is\ndifficult to even speak of an operation, as Airnode is designed to be\ncompletely set and forget.")])]),e._v(" "),n("li",[n("p",[e._v("It does not require any day-to-day maintenance such as updating the operating\nsystem or monitoring the node for uptime owing to existing fully managed\nserverless technology. It is designed to be stateless, which makes it\nextremely resilient against any problem that can cause permanent downtime and\nrequire node operator intervention.")])]),e._v(" "),n("li",[n("p",[e._v("It is built on services priced on-demand, meaning that the node operator is\ncharged only as much as their node is used. This allows any API provider to\nrun an oracle for free and start paying only after they start generating\nrevenue.")])]),e._v(" "),n("li",[n("p",[e._v("It does not require the node operator to handle cryptocurrency at all. Its\nprotocol is designed in a way that the requester covers all gas costs.")])])]),e._v(" "),n("p",[e._v("One way to see Airnode is as a lightweight wrapper around a Web API that allows\nit to communicate with smart contract platforms with no overhead or payment\ntoken friction. Regarding the level of involvement required from the API\nprovider, using Airnode can be likened to utilizing an API gateway that makes an\nAPI accessible over the Web, rather than operating a blockchain node as a\nside-business. The intent is for Airnode to become as ubiquitous and mundane for\nAPIs as using an API gateway, which will make a vast variety of first-party\noracles available to API3.")]),e._v(" "),n("p",[e._v("API providers invest significant resources to build a highly available\ninfrastructure. It is important for the oracle node implementation to not\ncontain single points of failure that may cause downtime. Existing solutions\nusing third-party oracles depend on over-redundancy at the oracle level to cover\nfor this, which results in excessive costs. API3 envisions each API to only be\nserved by its first-party oracle, which means the redundancy has to be\nimplemented at the level of the individual Airnode. The node being\nfully-serverless enables this to be done easily across different availability\nzones of a single cloud provider, or even across multiple cloud providers. It\nshould also be mentioned that it will be possible to containerize Airnode and\noperate it on-premises, yet using the serverless version will be recommended for\nalmost all use cases.")]),e._v(" "),n("p",[e._v("Airnode is developed by the founding members of API3 and is now open-sourced.\nThe software is feature-complete for current protocols, and further development\nwill be funded by API3 in the form of grants.")]),e._v(" "),n("h2",{attrs:{id:"airnode-protocol"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#airnode-protocol"}},[e._v("#")]),e._v(" Airnode Protocol")]),e._v(" "),n("p",[e._v("Preferring the better specified API connectivity problem over the oracle\nproblem, API3 believes that an oracle node should be designed to interface APIs\nto smart contract platforms very well, rather than as a sandbox that can\npurportedly be used for any purpose imaginable. Based on this philosophy, the\nAirnode protocol is designed to follow the self-emergent patterns used by APIs\nto achieve as transparent and frictionless of an API–smart contract platform\ninterface as possible.")]),e._v(" "),n("p",[e._v("The first and the most commonly used API style follows the request–response\npattern, where the user makes a request with parameters and the API responds as\nsoon as possible. This will be the first pattern that Airnode will support, as\nit is easy to standardize and integrate with existing APIs that follow the same\npattern. An example use case of this scheme would be requesting the result of a\nspecific match to be delivered, which can be used to resolve the respective\nprediction market. In addition, Airnode is planned to support the\npublish–subscribe pattern, where the user requests the oracle to call back a\nspecific method when parametrized conditions are met. For example, a\ndecentralized exchange may request the oracle to trigger a liquidation event for\na user in a leveraged position when ETH price drops below a particular price.\nEither of these patterns can be used to implement the live data feeds that DeFi\napplications use today, but they can also support a much larger variety of use\ncases in the form of dAPIs.")]),e._v(" "),n("p",[e._v("The Airnode protocol is designed in a way that the request contract's sponsor\nassumes all gas costs, even including the request fulfillment (response)\ntransactions. This is achieved by each Airnode having a separate wallet for each\nsponsor, similar to how cryptocurrency exchanges automatically designate wallets\nfor users to deposit funds to. The sponsor funds this wallet with the native\ncurrency (e.g., ETH), either in a lump sum or through per-request\nmicrotransactions. The funds in this wallet are used to fulfill all of the\nfollowing requests made by the sponsor. This scheme has significant advantages:")]),e._v(" "),n("ul",[n("li",[n("p",[e._v("The volatility in gas costs and payment token prices (e.g., LINK) makes it\nvirtually impossible for oracles to set profitable yet competitive prices.\nCalculating prices dynamically on-chain requires multiple data feeds and adds\na significant gas overhead per-request. With the Airnode protocol, the API\nproviders do not have to concern themselves with gas costs, and can use\npricing schemes such as $0.1 per call or $100 per month, which is similar to\ntypical API pricing models.")])]),e._v(" "),n("li",[n("p",[e._v("It is not reasonable to expect API providers to be able to convert fiat into\ncryptocurrency and fund their node wallets as a part of their day-to-day\noperations. In this scheme, the node operator never has to think about their\nnode wallet balance.")])]),e._v(" "),n("li",[n("p",[e._v("As seen in an attack performed on an Airnode competitor's data feeds, oracle\nnodes that use a common wallet to fulfill requests are susceptible to\nattackers spamming requests to drain their wallets. The solution to this is\nfor the node operators to maintain a whitelist of trusted addresses that they\nwill accept requests from. In addition to the difficulty of determining which\ncontracts are supposed to be trusted in this context, this renders any kind of\npublic listing service practically infeasible. This is a critical issue, as it\nstops the little independent ecosystem growth there is dead in its tracks.\nAirnode is not susceptible to this type of an attack, as a sponsor's\ndesignated wallet is only used to fulfill requests from the said sponsor, and\ncannot be drained by others.")])]),e._v(" "),n("li",[n("p",[e._v("Traditional oracle nodes have to fulfill all requests with very high gas\nprices, as they cannot tolerate their transaction queue being blocked by a\nsingle transaction made with a low gas price. With the Airnode protocol, this\nis no longer a concern, as each sponsor will have a separate transaction\nqueue. Then, sponsors whose requests are not time-critical would be able to\nprovide the fulfillment gas price as a request parameter and enjoy service at\na much lower gas cost. This scheme can be expected to synergize with EIP-1559.")])])]),e._v(" "),n("p",[e._v("Finally, let us briefly mention how the Airnode protocol approaches\nmonetization. It is common for a project-specific token to be worked into the\ncore of the protocol in an attempt to ensure that the said token is needed.\nHowever, this induces an enormous gas price overhead, severely restricts\nalternative monetization options and creates overall friction. For these\nreasons, the Airnode protocol purposefully avoids using such a token. Instead,\nthe node operator is allowed to associate custom authorizer contracts to their\noracle endpoints, which essentially decide if a requester should be responded to\nbased on any criteria that can be implemented on-chain. The authorizer contracts\ncan be used to enforce whitelists, blacklists, monthly subscription payments or\nper-call fees. This scheme is both very flexible, and is implemented in a way\nthat does not add any gas cost overheads. Although dAPI monetization is a\ncompletely independent matter, the flexibility that Airnode provides will carry\nover, e.g., it will be possible to implement a dAPI where the users assume all\ngas costs, which is not possible with the existing oracle solutions.")]),e._v(" "),n("h2",{attrs:{id:"api-integrations"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#api-integrations"}},[e._v("#")]),e._v(" API Integrations")]),e._v(" "),n("p",[e._v("There is a chicken-and-egg problem when it comes to integrating APIs to oracles.\nIf there is no existing demand for an API in an oracle ecosystem, nobody is\nincentivized to do the integration. If the API is not available due to a lack of\nintegration, nobody develops applications that will create the demand.")]),e._v(" "),n("p",[e._v("For API3 to reach its full potential, it will need hundreds, if not thousands of\nfirst party oracles so that it can easily set up new dAPIs or recompose existing\nones. This can only be achieved if APIs can be integrated to Airnode in an even\nmore scalable way. To this end, an improved version of the proprietary\nintegration tools will be open sourced for Airnode. Borrowing from the\n"),n("a",{attrs:{href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("OpenAPI Specification format"),n("OutboundLink")],1),e._v(",\nOracle Integration Specifications (OIS) define the operations of an API, the\nendpoints of an oracle, and how the two map to each other. An Airnode user will\nbe able to serve an API over their oracle simply by providing its OIS to their\nnode. Integrations made in this standardized format will be very easy to\ncollect, version and distribute.")]),e._v(" "),n("p",[e._v("OIS is a JSON file, primarily designed to describe the integration\nspecifications for Airnode to use. This means that it does not aim to be\nhuman-readable first and creating it manually to specify an integration would be\ndifficult. This problem will be solved by ChainAPI (a product from API3\ncurrently in development), an integration platform that will allow users to\ngenerate OIS for their APIs through an easy-to-use graphical interface. This\nwill be accompanied by other quality of life improvements for Airnode users,\nsuch as a node dashboard and a marketplace to list their endpoints. As a result,\nAPI3 will have a wide selection of first-party oracles to compose dAPIs from and\necosystem growth will no longer be bottle necked by integration capacity.")])],1)}),[],!1,null,null,null);t.default=o.exports}}]);