(window.webpackJsonp=window.webpackJsonp||[]).push([[778],{1559:function(e,t,s){"use strict";s.r(t);var n=s(9),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"frontmatter-title"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),s("VersionWarning"),e._v(" "),s("TocHeader"),e._v(" "),s("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,5]}}),e._v(" "),s("p",[e._v("The processing schema is the same for both\n"),s("RouterLink",{attrs:{to:"/ois/v1.2/ois.html#_5-9-preprocessingspecifications"}},[e._v("pre-processing")]),e._v(" and\n"),s("RouterLink",{attrs:{to:"/ois/v1.2/ois.html#_5-10-postprocessingspecifications"}},[e._v("post-processing")]),e._v(".")],1),e._v(" "),s("p",[e._v("The processing schema accepts an array of processing snippets which are chained.\nThe first snippet receives parameters submitted as part of a template or\non-chain request. The output of this snippet is passed to the second snippet and\nso on.")]),e._v(" "),s("p",[e._v("Every processing snippet follows this schema:")]),e._v(" "),s("ul",[s("li",[s("code",[e._v("environment")]),e._v(" - Currently one of "),s("code",[e._v("Node 14")]),e._v(" or "),s("code",[e._v("Node 14 async")]),e._v(". Both options\ninterpret the code as JavaScript and execute in Node.js version 14. The async\nversion can use asynchronous code. The code snippet is expected to call\n"),s("code",[e._v("resolve(output)")]),e._v(" with the output value as an argument. Airnode will use the\nresolved value as the input to subsequent snippets (if defined).")]),e._v(" "),s("li",[s("code",[e._v("value")]),e._v(" - The processing code written as a string.")]),e._v(" "),s("li",[s("code",[e._v("timeoutMs")]),e._v(" - The maximum timeout that this snippet can run. In case the\ntimeout is exceeded an error is thrown.")])]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Pre- and Post-processing Tutorials")]),e._v(" "),s("p",[e._v("The "),s("code",[e._v("airnode-examples")]),e._v(" monorepo has examples using pre-processing and\npost-processing,\n"),s("RouterLink",{attrs:{to:"/airnode/v0.9/grp-providers/tutorial/#monorepo-examples"}},[e._v("see here")]),e._v(".")],1)]),e._v(" "),s("h2",{attrs:{id:"inputs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inputs"}},[e._v("#")]),e._v(" Inputs")]),e._v(" "),s("p",[e._v("The processing snippet receives an "),s("code",[e._v("input")]),e._v(" value which is either the initial\nvalue or the output value from the previous processing snippet. The snippet must\ncreate a variable "),s("code",[e._v("output")]),e._v(" which will be used for the next processing snippet.\nThe processing snippet can use most Node.js built-in modules. Refer to the\nsource code of Airnode to understand how processing works and what modules are\nmade available to the snippet code. Modules cannot be imported directly in cloud\nenvironments.")]),e._v(" "),s("h2",{attrs:{id:"interpolation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interpolation"}},[e._v("#")]),e._v(" Interpolation")]),e._v(" "),s("p",[e._v("Note, that config.json supports interpolation of secrets via the JavaScript\nstring interpolation pattern (e.g "),s("code",[e._v("${SECRET_NAME}")]),e._v("). This syntax conflicts with\nthe string interpolation inside the processing snippets. In order to use the\ninterpolation in snippets, you need to escape the interpolation.")]),e._v(" "),s("p",[e._v("For example, the following code:")]),e._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[e._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("Received input ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[e._v("${")]),e._v("input"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[e._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[e._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" output "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" input"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("should be escaped inside the "),s("code",[e._v("config.json")]),e._v(" like this:")]),e._v(" "),s("div",{staticClass:"language-json line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-json"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"environment"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Node 14"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"timeoutMs"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  "),s("span",{pre:!0,attrs:{class:"token property"}},[e._v('"value"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"console.log(`Received input \\\\${input}`);\\nconst output = input;"')]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h2",{attrs:{id:"error-handling-and-security"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#error-handling-and-security"}},[e._v("#")]),e._v(" Error Handling and Security")]),e._v(" "),s("p",[e._v("Processing code is expected to be trustworthy as it is specified by the Airnode\noperator. Processing is an advanced feature that carries great security risks.\nIt is therefore advised that developers using the processing feature familiarise\nthemselves with the Airnode sources prior to developing any processing code\nsnippets.")]),e._v(" "),s("p",[e._v("Processing code executes in a constrained execution environment resembling\nNode.js. Some resources may not be available, for example the "),s("code",[e._v("require")]),e._v("\nstatement. Therefore code should be tested thoroughly in the target environment\n(e.g. Lambda and/or Docker client). For example, authentication implemented in\npre-processing should always be executed at the end of the respective processing\nchain and special care should be taken to avoid leakage of secrets.")])],1)}),[],!1,null,null,null);t.default=a.exports}}]);