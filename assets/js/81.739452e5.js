(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{534:function(t,e,s){t.exports=s.p+"assets/img/concepts-authorizers.74b294af.png"},883:function(t,e,s){"use strict";s.r(e);var a=s(9),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("TitleSpan",[t._v(t._s(t.$frontmatter.folder))]),t._v(" "),a("h1",{attrs:{id:"frontmatter-title"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),a("VersionWarning"),t._v(" "),a("TocHeader"),t._v(" "),a("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,5]}}),t._v(" "),a("p",[t._v("An Airnode can authorize requester contract access to its underlying API using\nauthorizers. As an alternative, an API provider could also use\n"),a("RouterLink",{attrs:{to:"/airnode/v0.10/concepts/relay-meta-auth.html"}},[t._v("Relayed Meta Data Authentication")]),t._v(" to authenticate\nrequests. Authorizers require blockchain knowledge by the API provider, relayed\nmeta data does not.")],1),t._v(" "),a("p",[t._v("When an Airnode receives a request, it can use on-chain authorizer contracts to\nverify if a response is warranted. Authorizers allow Airnodes to implement a\nwide variety of policies. Below are some examples:")]),t._v(" "),a("ul",[a("li",[t._v("Respond to requests from sponsors that have paid their monthly subscription\nfee in DAI.")]),t._v(" "),a("li",[t._v("Respond to individual requests for which a per-call fee has been paid in API3\ntokens.")]),t._v(" "),a("li",[t._v("Respond to requests made by requesters that were whitelisted by the API3 DAO.")]),t._v(" "),a("li",[t._v("Respond to requests made by sponsors who have been whitelisted by the Airnode\nowner's backend (for example, based on PayPal payments).")])]),t._v(" "),a("p",[t._v("A common use case for an authorizer is the\n"),a("a",{attrs:{href:"#requesterauthorizerwithairnode"}},[t._v("RequesterAuthorizerWithAirnode")]),t._v(" authorizer\ncontract developed for Airnode operators to use right out-of-the-box. It allows\nthe whitelisting of requester contracts (with or without expiration timestamps)\non a per endpoint basis. This is the most common use case and may in fact\nsatisfy the needs of many Airnodes.")]),t._v(" "),a("p",[t._v("The diagram below illustrates how Airnode utilizes authorizers.")]),t._v(" "),a("blockquote",[a("img",{attrs:{src:s(534),width:"650px"}}),t._v(" "),a("ol",[a("li",[a("p",{staticClass:"diagram-line"},[t._v("When Airnode starts it reads its list of authorizer contracts declared in "),a("code",[t._v("config.json")]),t._v(".")])]),t._v(" "),a("li",[a("p",{staticClass:"diagram-line"},[t._v("Airnode gathers requests from the event logs, during its run cycle.")])]),t._v(" "),a("li",[a("p",{staticClass:"diagram-line"},[t._v("Airnode sends each request, along with the list of authorizer contracts, to "),a("code",[t._v("checkAuthorizationStatus()")]),t._v(".")])]),t._v(" "),a("li",[a("p",{staticClass:"diagram-line"},[a("code",[t._v("checkAuthorizationStatus()")]),t._v(" executes the "),a("code",[t._v("isAuthorized()")]),t._v(" function in each authorizer contract. If any one authorizer contract returns true, then true is returned to the Airnode which in turn proceeds to fulfill the request.")])])])]),t._v(" "),a("h2",{attrs:{id:"airnode-authorizer-policies"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#airnode-authorizer-policies"}},[t._v("#")]),t._v(" Airnode Authorizer Policies")]),t._v(" "),a("p",[t._v("Airnode provides two authorizer contracts, one of which\n("),a("code",[t._v("RequesterAuthorizerWithAirnode")]),t._v(") can be used by any API provider. The other\n("),a("code",[t._v("RequesterAuthorizerWithManager")]),t._v(") is meant to be used by the API3 DAO. They are\ndetailed within this doc in sections below.")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#requesterauthorizerwithairnode"}},[t._v("RequesterAuthorizerWithAirnode")])]),t._v(" "),a("li",[a("a",{attrs:{href:"#requesterauthorizerwithmanager"}},[t._v("RequesterAuthorizerWithManager")])])]),t._v(" "),a("p",[t._v("Both these authorizer contracts inherit and extend the "),a("code",[t._v("RequesterAuthorizer")]),t._v("\nabstract contract which also extends the "),a("code",[t._v("Whitelist")]),t._v(" contract. This means that\nboth authorizer contracts will need to whitelist requester contracts prior to\nmake them available to an Airnode. For "),a("code",[t._v("RequesterAuthorizerWithAirnode")]),t._v(" this can\nbe done using the\n"),a("RouterLink",{attrs:{to:"/airnode/v0.10/reference/packages/admin-cli.html#requesterauthorizerwithairnode"}},[t._v("admin-cli")]),t._v(".")],1),t._v(" "),a("p",[t._v("The main difference between them is that "),a("code",[t._v("RequesterAuthorizerWithAirnode")]),t._v(" allows\nthe Airnode address to grant whitelisting roles for that specific Airnode. On\nthe other hand, "),a("code",[t._v("RequesterAuthorizerWithManager")]),t._v(" allows the manager address\n(read: the API3 DAO) to grant whitelisting roles for all Airnodes that use it.")]),t._v(" "),a("p",[t._v("Some common functions available are:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("requesterIsWhitelisted")]),t._v(": Called to check if a requester is whitelisted to use\nthe Airnode–endpoint pair.")]),t._v(" "),a("li",[a("code",{staticStyle:{"overflow-wrap":"break-word"}},[t._v("airnodeToEndpointIdToRequesterToWhitelistStatus")]),t._v(":\nCalled to get the detailed whitelist status of a requester for the\nAirnode–endpoint pair.")])]),t._v(" "),a("h3",{attrs:{id:"custom-authorizers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#custom-authorizers"}},[t._v("#")]),t._v(" Custom Authorizers")]),t._v(" "),a("p",[t._v("Custom authorizer contracts can implement any arbitrary authorization logic. An\nexample might be where Airnode only responds to requests if the requester has\nmade less than a specific number of requests to the Airnode in the last month,\neffectively implementing an on-chain call quota.")]),t._v(" "),a("h3",{attrs:{id:"authorizer-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authorizer-list"}},[t._v("#")]),t._v(" Authorizer List")]),t._v(" "),a("p",[t._v("Airnode authorizers are listed in the config.json file at\n"),a("RouterLink",{attrs:{to:"/airnode/v0.10/grp-providers/guides/build-an-airnode/configuring-airnode.html#chains"}},[t._v("chains[n].authorizers")]),t._v(".\nAn authorizer typically checks for a single condition (has the requester made\ntheir monthly payment, is the "),a("code",[t._v("requester")]),t._v(" whitelisted, etc.). Authorizers can be\ncombined to enforce more complex policies. If any of the authorizers in\n"),a("code",[t._v("chains[n].authorizers")]),t._v(" gives access, the request will considered to be\nauthorized. From a logical standpoint, the authorization outcomes get "),a("em",[t._v("OR")]),t._v("ed.")],1),t._v(" "),a("h3",{attrs:{id:"authorizer-interface"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#authorizer-interface"}},[t._v("#")]),t._v(" Authorizer Interface")]),t._v(" "),a("p",[t._v("Authorizer contracts that inherit from "),a("code",[t._v("IAuthorizer")]),t._v(" can be used to implement an\narbitrary authorization policy based on its input parameters.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("requestId")]),t._v(": bytes32")]),t._v(" "),a("li",[a("code",[t._v("airnode")]),t._v(": address")]),t._v(" "),a("li",[a("code",[t._v("endpointId")]),t._v(": bytes32")]),t._v(" "),a("li",[a("code",[t._v("sponsor")]),t._v(": address")]),t._v(" "),a("li",[a("code",[t._v("requester")]),t._v(": address")])]),t._v(" "),a("p",[t._v("Note that the authorizer does not have to use all of the arguments, and can even\ndecide on arbitrary on-chain criteria such as "),a("code",[t._v("block.number")]),t._v(" (e.g., do not\nrespond to anyone after block number N). An authorizer is a contract with the\nfollowing interface:")]),t._v(" "),a("div",{staticClass:"language-solidity line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-solidity"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IAuthorizerV0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAuthorizedV0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" requestId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" airnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" endpointId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" sponsor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" requester\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("external")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("view")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("Below is an example of how to create the simplest form of an authorizer. This\nauthorizer allows any requester contract to call the endpointId (0xf2ee...).")]),t._v(" "),a("div",{staticClass:"language-solidity line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-solidity"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// SPDX-License-Identifier: MIT")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pragma")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("solidity")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.8")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@api3/airnode-protocol/contracts/authorizers/interfaces/IAuthorizerV0.sol"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("contract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyAuthorizer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("is")]),t._v(" IAuthorizerV0\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isAuthorizedV0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" requestId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" airnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" endpointId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" sponsor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" requester\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("external")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("view")]),t._v(" override "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" expected "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xf2ee")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" endpointId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" expected"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br")])]),a("h3",{attrs:{id:"why-is-an-authorizers-scheme-needed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-is-an-authorizers-scheme-needed"}},[t._v("#")]),t._v(" Why is an authorizers scheme needed?")]),t._v(" "),a("p",[t._v("Airnodes need the ability to fulfill requests selectively. This is required for\ntwo main reasons:")]),t._v(" "),a("ol",[a("li",[t._v("The Airnode only fulfills requests made by requesters who have made payment\nto the Airnode owner, which allows them to monetize their services.")]),t._v(" "),a("li",[t._v("The services of the Airnode are sensitive and can only be accessed by certain\nrequesters, e.g., who have gone through KYC.")])]),t._v(" "),a("p",[t._v("A protocol that does not have the "),a("code",[t._v("authorizers")]),t._v(" scheme or equivalent\nfunctionality cannot be considered as permissionless, and will not be able to\nachieve wide-spread adoption.")]),t._v(" "),a("h3",{attrs:{id:"are-authorizers-required"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#are-authorizers-required"}},[t._v("#")]),t._v(" Are authorizers required?")]),t._v(" "),a("p",[t._v("Authorizers are not required. An Airnode operator could use\n"),a("RouterLink",{attrs:{to:"/airnode/v0.10/concepts/authorizations.html"}},[t._v("Authorizations")]),t._v(" or\n"),a("RouterLink",{attrs:{to:"/airnode/v0.10/concepts/relay-meta-auth.html"}},[t._v("Relayed Meta Data Security Schemes")]),t._v(". It is possible to\nuse both authorizers, authorizations, and relay security schemes together.")],1),t._v(" "),a("h2",{attrs:{id:"how-are-authorizers-implemented"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-are-authorizers-implemented"}},[t._v("#")]),t._v(" How are authorizers implemented?")]),t._v(" "),a("p",[t._v("There are two main points to consider about how authorization policies are\nimplemented:")]),t._v(" "),a("ol",[a("li",[t._v("If the policies are kept off-chain, the requester cannot see them or check if\nthey satisfy them. Furthermore, the Airnode owner updating the policies\n(e.g., increasing the service fees) requires off-chain coordination with the\nrequester.")]),t._v(" "),a("li",[t._v("Embedding the policies in the request–response loop results in a gas cost\noverhead.")])]),t._v(" "),a("p",[t._v("Based on these considerations, Airnode uses a hybrid method. An Airnode\nannounces its authorization policy through off-chain channels as the addresses\nof a list of authorizer contracts. Whenever the Airnode receives a request, it\nchecks if it should fulfill this request by making a static call that queries\nthis on-chain policy. Similarly, the requester can use this on-chain policy by\nmaking a static call to check if they are authorized. This scheme both allows\nthe Airnode to set transparent and flexible policies, and this to be done with\nno gas overhead.")]),t._v(" "),a("p",[t._v("Currently there are two "),a("code",[t._v("authorizers")]),t._v(" scheme types,\n"),a("code",[t._v("requesterEndpointAuthorizers")]),t._v(" and "),a("code",[t._v("crossChainRequesterAuthorizers")]),t._v(". These are\nset in "),a("code",[t._v("chains[n].authorizers")]),t._v(" of "),a("code",[t._v("config.json")]),t._v(" as described below.")]),t._v(" "),a("h3",{attrs:{id:"same-chain-requesterendpointauthorizers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#same-chain-requesterendpointauthorizers"}},[t._v("#")]),t._v(" Same-chain: requesterEndpointAuthorizers")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("requesterEndpointAuthorizers")]),t._v(" authorizer scheme type specifies an array of\non-chain contract addresses to query when attempting to authorize a request. In\ncontrast to the other authorizer scheme type, "),a("code",[t._v("crossChainRequesterAuthorizers")]),t._v(",\nthe contract addresses are expected to reside on the chain specified by the "),a("code",[t._v("id")]),t._v("\nfield of the parent "),a("code",[t._v("chains")]),t._v(" object i.e. the authorizer contract addresses are\non the same chain. There are two configurations possible for\n"),a("code",[t._v("requesterEndpointAuthorizers")]),t._v(': "allow all" and "filter all".')]),t._v(" "),a("h4",{attrs:{id:"allow-all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#allow-all"}},[t._v("#")]),t._v(" Allow All")]),t._v(" "),a("p",[t._v("When "),a("code",[t._v("chains[n].authorizers.requesterEndpointAuthorizers")]),t._v(" is an empty array, all\nrequests are authorized. In the example below, all chain "),a("em",[t._v("2")]),t._v(" requests are\nauthorized.")]),t._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"chains"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"authorizers"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"requesterEndpointAuthorizers"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    ...\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  ...\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("h4",{attrs:{id:"filter-all"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#filter-all"}},[t._v("#")]),t._v(" Filter All")]),t._v(" "),a("p",[t._v("If the Airnode wants to authorize selectively, it should use one or more\nauthorizer contracts that implement filtering logic. In the example below, a\nrequest would be authorized on chain "),a("em",[t._v("2")]),t._v(" if "),a("em",[t._v("either")]),t._v(" of the two\n"),a("code",[t._v("requesterEndpointAuthorizers")]),t._v(" contracts authorize the request.")]),t._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"chains"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"authorizers"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"requesterEndpointAuthorizers"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0xcd...cd8d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0xff...d19c"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    ...\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h3",{attrs:{id:"cross-chain-crosschainrequesterauthorizers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cross-chain-crosschainrequesterauthorizers"}},[t._v("#")]),t._v(" Cross-chain: crossChainRequesterAuthorizers")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("crossChainRequesterAuthorizers")]),t._v(" authorizer scheme type specifies an array\nof objects that allow for cross-chain request authorization. The key-value pairs\nof each object resemble other "),a("code",[t._v("config.json")]),t._v(" objects:\n"),a("code",[t._v("requesterEndpointAuthorizers")]),t._v(" specifies an array of contract address that\nauthorize requests and both "),a("code",[t._v("chainType")]),t._v(" and "),a("code",[t._v("contracts")]),t._v(" are configured\nequivalently to their like named parent "),a("code",[t._v("chains[n]")]),t._v(" objects described in the\n"),a("RouterLink",{attrs:{to:"/airnode/v0.10/reference/deployment-files/config-json.html#chains"}},[t._v("config.json reference")]),t._v(".\nLastly, "),a("code",[t._v("chainId")]),t._v(" specifies the cross-chain (network) id and "),a("code",[t._v("chainProvider")]),t._v(" is\nan object containing the chain provider url for the "),a("em",[t._v("chain specified by\n"),a("code",[t._v("chainId")])]),t._v(".")],1),t._v(" "),a("p",[t._v("Note that "),a("code",[t._v("crossChainRequesterAuthorizers")]),t._v(" is an array that can contain multiple\ncross-chain authorizer objects, which allows for authorizers across multiple\nchains and/or redundancy in providers for each chain.")]),t._v(" "),a("p",[t._v("The below example combines both "),a("code",[t._v("requesterEndpointAuthorizers")]),t._v(" and\n"),a("code",[t._v("crossChainRequesterAuthorizers")]),t._v(" authorizer scheme types. Requests will be\nauthorized if the same-chain ("),a("code",[t._v('"id": "2"')]),t._v(") "),a("code",[t._v("requesterEndpointAuthorizers")]),t._v("\ncontract "),a("code",[t._v("0xcd...cd8d")]),t._v(" authorizes the request or if the cross-chain\n("),a("code",[t._v('"chainId": "1"')]),t._v(") authorizer contract "),a("code",[t._v("0xCE5e...1abc")]),t._v(" authorizes the request.")]),t._v(" "),a("div",{staticClass:"language-json line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"chains"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"id"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"authorizers"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"requesterEndpointAuthorizers"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0xcd...cd8d"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"crossChainRequesterAuthorizers"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"requesterEndpointAuthorizers"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0xCE5e...1abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"chainType"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"evm"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"chainId"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"contracts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"AirnodeRrp"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"0xa0AD...a1Bd"')]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"chainProvider"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"url"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://mainnet.infura.io/..."')]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    ...\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br")])]),a("h2",{attrs:{id:"pre-built-authorizer-contracts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pre-built-authorizer-contracts"}},[t._v("#")]),t._v(" Pre-built Authorizer Contracts")]),t._v(" "),a("p",[t._v("Airnode provides two authorizer contracts, one of which\n(RequesterAuthorizerWithAirnode) can be used by any API provider. The other\n(RequesterAuthorizerWithManager) is meant to be used by the API3 DAO. Custom\nauthorizer contract can also be created to provide other verification logic.")]),t._v(" "),a("h3",{attrs:{id:"requesterauthorizerwithairnode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requesterauthorizerwithairnode"}},[t._v("#")]),t._v(" RequesterAuthorizerWithAirnode")]),t._v(" "),a("p",[t._v("This contract implements a requester-based RRP authorizer with three types of\nroles.")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("Whitelist expiration extender")]),t._v(": Is allowed to extend temporary\nwhitelisting expiration.")]),t._v(" "),a("li",[a("strong",[t._v("Whitelist expiration setter")]),t._v(": Is allowed to set the temporary whitelisting\nexpiration (i.e., they can also reduce the expiration time).")]),t._v(" "),a("li",[a("strong",[t._v("Indefinite whitelister")]),t._v(": Is allowed to whitelist/unwhitelist indefinitely\nEach Airnode's address is treated as if they have all these three roles for\nthe respective Airnode, and they can also grant these roles to other\naccounts, which includes contracts that implement arbitrary business logic.")])]),t._v(" "),a("h4",{attrs:{id:"extendwhitelistexpiration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extendwhitelistexpiration"}},[t._v("#")]),t._v(" extendWhitelistExpiration")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("extendWhitelistExpiration()")]),t._v(" function can be called by a whitelist\nexpiration extender or the Airnode address to extend the whitelist expiration of\na requester for the Airnode–endpoint pair.")]),t._v(" "),a("p",[t._v("This function emits a "),a("code",[t._v("ExtendedWhitelistExpiration")]),t._v(" event with the following\nsignature:")]),t._v(" "),a("div",{staticClass:"language-solidity line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-solidity"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExtendedWhitelistExpiration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" airnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" endpointId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" requester"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),t._v(" expiration\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h4",{attrs:{id:"setwhitelistexpiration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setwhitelistexpiration"}},[t._v("#")]),t._v(" setWhitelistExpiration")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("setWhitelistExpiration()")]),t._v(" function can be called by a whitelist expiration\nsetter or the Airnode address to set the whitelisting expiration of a requester\nfor the Airnode–endpoint pair. This can hasten expiration.")]),t._v(" "),a("p",[t._v("This function emits a "),a("code",[t._v("SetWhitelistExpiration")]),t._v(" event with the following\nsignature:")]),t._v(" "),a("div",{staticClass:"language-solidity line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-solidity"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetWhitelistExpiration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" airnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" endpointId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" requester"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),t._v(" expiration\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h4",{attrs:{id:"setwhiteliststatuspastexpiration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setwhiteliststatuspastexpiration"}},[t._v("#")]),t._v(" setWhitelistStatusPastExpiration")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("setWhitelistStatusPastExpiration()")]),t._v(" function can be called by an indefinite\nwhitelister or the Airnode address to set the whitelist status of a requester\npast expiration for the Airnode–endpoint pair. This is useful to allow access to\nan API even if the expiration date has passed. For example, keep authorizing\nrequests while a sum of API3 tokens is locked.")]),t._v(" "),a("p",[t._v("This function emits a "),a("code",[t._v("ExtendedWhitelistExpiration")]),t._v(" event with the following\nsignature:")]),t._v(" "),a("div",{staticClass:"language-solidity line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-solidity"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetWhitelistStatusPastExpiration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" airnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" endpointId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" requester"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" status\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h4",{attrs:{id:"isauthorized"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isauthorized"}},[t._v("#")]),t._v(" isAuthorized")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("isAuthorized()")]),t._v(" function will be called by AirnodeRrpV0 to verify the\nauthorization status of a request. This function will return true for all\nwhitelisted requester contracts, admins and Airnode operator address.")]),t._v(" "),a("h3",{attrs:{id:"requesterauthorizerwithmanager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requesterauthorizerwithmanager"}},[t._v("#")]),t._v(" RequesterAuthorizerWithManager")]),t._v(" "),a("p",[t._v("This contract implements a requester-based RRP authorizer and assigns the API3\nDAO as the manager or in other words, the highest ranking admin across all\nAirnodes.")]),t._v(" "),a("p",[t._v("The manager and the accounts that it has granted the whitelist expiration\nextender, whitelist expiration setter and the indefinite whitelister roles will\nuse "),a("code",[t._v("RequesterAuthorizerWithManager")]),t._v(" to whitelist requesters across all\nAirnodes.")]),t._v(" "),a("h4",{attrs:{id:"extendwhitelistexpiration-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extendwhitelistexpiration-2"}},[t._v("#")]),t._v(" extendWhitelistExpiration")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("extendWhitelistExpiration()")]),t._v(" function can be called by a whitelist\nexpiration extender or the manager to extend the whitelist expiration of a\nrequester for the Airnode–endpoint pair.")]),t._v(" "),a("p",[t._v("This function emits a "),a("code",[t._v("ExtendedWhitelistExpiration")]),t._v(" event with the following\nsignature:")]),t._v(" "),a("div",{staticClass:"language-solidity line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-solidity"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ExtendedWhitelistExpiration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" airnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" endpointId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" requester"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),t._v(" expiration\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h4",{attrs:{id:"setwhitelistexpiration-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setwhitelistexpiration-2"}},[t._v("#")]),t._v(" setWhitelistExpiration")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("setWhitelistExpiration()")]),t._v(" function can be called by a whitelist expiration\nsetter or the manager to set the whitelisting expiration of a requester for the\nAirnode–endpoint pair. This can hasten expiration.")]),t._v(" "),a("p",[t._v("This function emits a "),a("code",[t._v("SetWhitelistExpiration")]),t._v(" event with the following\nsignature:")]),t._v(" "),a("div",{staticClass:"language-solidity line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-solidity"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetWhitelistExpiration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" airnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" endpointId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" requester"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint256")]),t._v(" expiration\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h4",{attrs:{id:"setwhiteliststatuspastexpiration-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setwhiteliststatuspastexpiration-2"}},[t._v("#")]),t._v(" setWhitelistStatusPastExpiration")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("setWhitelistStatusPastExpiration()")]),t._v(" function can be called by an indefinite\nwhitelister or the manager to set the whitelist status of a requester past\nexpiration for the Airnode–endpoint pair. This is useful to allow access to an\nAPI even if the expiration date has passed. For example, keep authorizing\nrequests while a sum of API3 tokens is locked.")]),t._v(" "),a("p",[t._v("This function emits a "),a("code",[t._v("ExtendedWhitelistExpiration")]),t._v(" event with the following\nsignature:")]),t._v(" "),a("div",{staticClass:"language-solidity line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-solidity"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SetWhitelistStatusPastExpiration")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" airnode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes32")]),t._v(" endpointId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" requester"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("address")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("indexed")]),t._v(" sender"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v(" status\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("h4",{attrs:{id:"isauthorized-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isauthorized-2"}},[t._v("#")]),t._v(" isAuthorized")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("isAuthorized()")]),t._v(" function will be called by AirnodeRrpV0 to verify the\nauthorization status of a request. This function will return true for all\nwhitelisted requester contracts, admins and the meta-admin address.")])],1)}),[],!1,null,null,null);e.default=n.exports}}]);