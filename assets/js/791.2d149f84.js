(window.webpackJsonp=window.webpackJsonp||[]).push([[791],{1574:function(e,t,r){"use strict";r.r(t);var a=r(9),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("TitleSpan",[e._v(e._s(e.$frontmatter.folder))]),e._v(" "),r("h1",{attrs:{id:"frontmatter-title"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),r("TocHeader"),e._v(" "),r("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,3]}}),e._v(" "),r("p",[e._v("The "),r("a",{attrs:{href:"https://github.com/api3dao/qrng-example",target:"_blank",rel:"noopener noreferrer"}},[e._v("qrng-example"),r("OutboundLink")],1),e._v(" project (GitHub\nrepo) demonstrates how to build a smart contract (known as a requester) using\nthe Airnode requestâ€“response protocol to receive QRNG services. It is\nrecommended to run the example project to learn how it uses the QRNG service on\na testnet, and read the associated README file. It also contains example code\nthat will be useful when creating a requester (smart contract) that requests a\nrandom number.")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/api3dao/qrng-example/tree/main/contracts",target:"_blank",rel:"noopener noreferrer"}},[e._v("qrng-example/contracts/"),r("OutboundLink")],1),e._v(" "),r("ul",[r("li",[r("code",[e._v("QrngExamples.sol")]),e._v(": A sample requester used to call the QRNG service.")])])]),e._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/api3dao/qrng-example/tree/main/deploy",target:"_blank",rel:"noopener noreferrer"}},[e._v("qrng-example/deploy/"),r("OutboundLink")],1),e._v(" "),r("ul",[r("li",[r("code",[e._v("deploy.js")]),e._v(": Script that deploys a requester to a chain.")]),e._v(" "),r("li",[r("code",[e._v("setup.js")]),e._v(": Script that sets the parameters on the requester contract. These\nparameters are used when calling the QRNG service.")]),e._v(" "),r("li",[r("code",[e._v("fund.js")]),e._v(": Script that funds the wallet the requester uses to pay the gas\ncosts.")])])])]),e._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[e._v("Gas Costs")]),e._v(" "),r("p",[e._v("Using the QRNG service is free, meaning there is no subscription fee to pay.\nThere is a gas cost incurred on-chain when Airnode places the random number\non-chain in response to a request, which the requester needs to pay for.")])]),e._v(" "),r("h2",{attrs:{id:"sponsor-wallet"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#sponsor-wallet"}},[e._v("#")]),e._v(" Sponsor Wallet")]),e._v(" "),r("p",[e._v("The QRNG example project\n"),r("a",{attrs:{href:"https://github.com/api3dao/qrng-example/blob/main/deploy/2_setup.js#L11-L28",target:"_blank",rel:"noopener noreferrer"}},[e._v("sets the sponsor wallet"),r("OutboundLink")],1),e._v("\nusing the requester address. The wallet is then used to pay gas costs when the\nAirnode responds to a request. An alternate method is to use the\n"),r("RouterLink",{attrs:{to:"/airnode/v0.9/reference/packages/admin-cli.html"}},[e._v("Admin CLI")]),e._v(" as is the case with\nthe "),r("RouterLink",{attrs:{to:"/qrng/guides/remix-example.html"}},[e._v("Remix Example Project")]),e._v(".")],1),e._v(" "),r("airnode-SponsorWalletWarning"),e._v(" "),r("h2",{attrs:{id:"withdrawals"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#withdrawals"}},[e._v("#")]),e._v(" Withdrawals")]),e._v(" "),r("p",[e._v("In this example, the requester contract was written with the scope of\ndemonstrating on-chain requests for random numbers.")]),e._v(" "),r("div",{staticClass:"custom-block warning"},[r("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),r("p",[e._v("For brevity, the requester contract does not contain withdrawal or other\nadditional functionality.")])]),e._v(" "),r("p",[e._v("For those inclined, withdrawal functionality can be added to the requester\ncontract. First, funds must be transferred from "),r("code",[e._v("sponsorWallet")]),e._v(" to "),r("code",[e._v("sponsor")]),e._v(".\nSince the requester contract is\n"),r("a",{attrs:{href:"https://github.com/api3dao/qrng-example/blob/46c93797902f25a46b73e40f8fa52c745b64ebb2/contracts/QrngExample.sol#L66",target:"_blank",rel:"noopener noreferrer"}},[e._v("set as the sponsor"),r("OutboundLink")],1),e._v(",\nthe requester contract needs to make the withdrawal request by calling\n"),r("code",[e._v("requestWithdrawal")]),e._v(" from the\n"),r("a",{attrs:{href:"https://github.com/api3dao/airnode/blob/4f3454cf40e1b0a1373e954df96ac22e1ce2e43f/packages/airnode-protocol/contracts/rrp/WithdrawalUtilsV0.sol#L27",target:"_blank",rel:"noopener noreferrer"}},[e._v("WithdrawalUtilsV0"),r("OutboundLink")],1),e._v("\ncontract. The "),r("code",[e._v("AirnodeRrpV0")]),e._v(" contract inherits this contract and therefore the\n"),r("RouterLink",{attrs:{to:"/airnode/v0.7/reference/airnode-addresses.html"}},[e._v("published addresses")]),e._v(" can be\nused. Second, a withdrawal function must be added to the requester contract such\nthat the owner of the requester contract can transfer the requester contract\nbalance to their address.")],1)],1)}),[],!1,null,null,null);t.default=n.exports}}]);