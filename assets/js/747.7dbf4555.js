(window.webpackJsonp=window.webpackJsonp||[]).push([[747],{1524:function(e,a,t){"use strict";t.r(a);var n=t(9),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("TitleSpan",[e._v(e._s(e.$frontmatter.folder))]),e._v(" "),t("h1",{attrs:{id:"frontmatter-title"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),t("p",[e._v("What is the difference between a dAPI name and a Beacon or Beacon set ID? dAPI\nnames are the principle means used to get API provider data held by Beacons. Any\none Beacon, identified by an ID, has a single value. A dAPI may in fact get\nvalues from several Beacons and average the values, and/or apply other logic,\nbefore returning a single value to the reader.")]),e._v(" "),t("p",[e._v("dAPIs can be fluid because they use a publicly known set of Beacons to source\nvalues from. The list of Beacons could be altered for best-in-time results (e.g.\nBeacon availability) without a reader needing to change the code of its smart\ncontract. Beacons could come and go but dAPIs are durable. Because of this\nflexibility it is always best to use the dAPI name rather than Beacon IDs which\nare fixed.")]),e._v(" "),t("ul",[t("li",[e._v("dAPI name: A human readable name that represents a Beacon or Beacon set. The\nname is assigned when the dAPI is created and never changes.")]),e._v(" "),t("li",[e._v("Beacon ID: The hash of a Beacon's parameters.")]),e._v(" "),t("li",[e._v("Beacon set ID: The hash of the Beacon IDs in the Beacon set.")])]),e._v(" "),t("p",[e._v("A dAPI's name is identical across all chains. When accessing a dAPI value with a\nfunction such as\n"),t("RouterLink",{attrs:{to:"/dapis/developers/read-data-feed-with-dapi-name.html"}},[e._v("readDataFeedWithName()")]),e._v(", use\nthe "),t("RouterLink",{attrs:{to:"/dapis/developers/#dapi-names"}},[e._v("bytes32 encoded value")]),e._v(" of the "),t("code",[e._v("dapiName")]),e._v(".")],1),e._v(" "),t("p",[e._v("A Beacon's ID and its template are identical across chains. When accessing a\nBeacon's value with a function such as\n"),t("RouterLink",{attrs:{to:"/dapis/developers/read-data-feed-with-id.html"}},[e._v("readDataFeedWithId()")]),e._v(", the "),t("code",[e._v("beaconId")]),e._v("\nis needed.")],1)],1)}),[],!1,null,null,null);a.default=s.exports}}]);