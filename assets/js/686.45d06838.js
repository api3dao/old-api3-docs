(window.webpackJsonp=window.webpackJsonp||[]).push([[686],{1450:function(e,t,o){"use strict";o.r(t);var r=o(9),a=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("TitleSpan",[e._v(e._s(e.$frontmatter.folder))]),e._v(" "),o("h1",{attrs:{id:"frontmatter-title"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),o("VersionWarning"),e._v(" "),o("TocHeader"),e._v(" "),o("TOC",{staticClass:"table-of-contents",attrs:{"include-level":[2,3]}}),e._v(" "),o("h2",{attrs:{id:"cloud-provider-log-organization"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#cloud-provider-log-organization"}},[e._v("#")]),e._v(" Cloud Provider Log Organization")]),e._v(" "),o("p",[e._v("Airnode logs or log groups are named similarly in AWS and GCP and include the\nfollowing hyphen-separated components: "),o("code",[e._v("airnode")]),e._v(", "),o("code",[e._v("<airnode short address>")]),e._v(",\n"),o("code",[e._v("<stage>")]),e._v(", and "),o("code",[e._v("<airnode cycle stage or request type>")]),e._v(", for example,\n"),o("code",[e._v("airnode-9e62180-tutorial-startCoordinator")]),e._v(". The possible Airnode cycle stages\nor request types and the logs they contain are as follows:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("startCoordinator")]),e._v(": Logs for chain provider initialization and request\nfetching")]),e._v(" "),o("li",[o("code",[e._v("run")]),e._v(": Logs of API calls and withdrawals originating from blockchain requests")]),e._v(" "),o("li",[o("code",[e._v("httpReq")]),e._v(": Logs for "),o("RouterLink",{attrs:{to:"/airnode/v0.9/grp-providers/guides/build-an-airnode/http-gateways.html"}},[e._v("HTTP gateway requests")])],1),e._v(" "),o("li",[o("code",[e._v("httpSignedReq")]),e._v(": Logs for\n"),o("RouterLink",{attrs:{to:"/airnode/v0.9/grp-providers/guides/build-an-airnode/http-gateways.html"}},[e._v("HTTP signed data gateway requests")])],1)]),e._v(" "),o("h3",{attrs:{id:"aws"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#aws"}},[e._v("#")]),e._v(" AWS")]),e._v(" "),o("p",[e._v("Airnode logs are available in\n"),o("a",{attrs:{href:"https://console.aws.amazon.com/cloudwatch",target:"_blank",rel:"noopener noreferrer"}},[e._v("CloudWatch"),o("OutboundLink")],1),e._v(" under Logs > Log groups.\nNote that for the HTTP gateways, AWS generates a unique "),o("code",[e._v("requestId")]),e._v(" for each\nrequest. These should not be confused with the "),o("code",[e._v("requestId")]),e._v(" of a request\noriginating from a blockchain.")]),e._v(" "),o("h3",{attrs:{id:"gcp"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#gcp"}},[e._v("#")]),e._v(" GCP")]),e._v(" "),o("p",[e._v("Airnode logs are available in the\n"),o("a",{attrs:{href:"https://console.cloud.google.com/logs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Logs Explorer"),o("OutboundLink")],1),e._v('. It can be convenient to\nquery or stream logs by the "Cloud Function" Resource Type and then by "Function\nName" in order to view a specific request type or Airnode cycle stage.')]),e._v(" "),o("h2",{attrs:{id:"local-airnode-client"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#local-airnode-client"}},[e._v("#")]),e._v(" Local Airnode Client")]),e._v(" "),o("p",[e._v("Running the "),o("code",[e._v("airnode-client")]),e._v(" Docker image will output container logs to the\ncommand line. These logs are also available through the Docker interface e.g.\nunder Containers within Docker Desktop. For more information see the\n"),o("RouterLink",{attrs:{to:"/airnode/v0.9/grp-providers/docker/client-image.html#checking-airnode-logs"}},[e._v("airnode-client")]),e._v(" image.")],1)],1)}),[],!1,null,null,null);t.default=a.exports}}]);